1 - Elas são classificadas da 1ª a 5ª geração. 1ª geração: São as linguagens de máquina. (Ex: Binária) | 2ª geração: São as linguagens de montagem, Assembly. (Ex: Linguagem Assembly ARM, que é uma família de arquiteturas de processadores do tipo RISC) | 3ª geração: São linguagens de alto nível que seguem uma lógica (How to do). (Ex: C, COBOL, FORTRAN) | 4ª geração: São as linguagens para aplicações específicas não procedurais (Não seguem uma lógica, What to do). (Ex: ABAP, MATLAB) | 5ª geração: São linguagens baseadas em lógicas matemáticas, e que ajudam a dar suporte na programação de IAs. (Ex: OPS5).
2 - Legibildade: Quanto mais avançada a linguagem, mais fácil de se compreender. | Redigibilidade: Facilidade de escrever o código impulsionou mais criações, reduzindo a complexidade da programação. | Portabilidade: Linguagens de alto nível permitem que o código seja executado em diferentes sistemas/hardware. | Reusabilidade: Uma forma mais simples, eficiente e que possa ser reutilizada, também impulsionou a criação de linguagens de alto nível, assim, não há necessidade de reescrever grandes partes do programa.
3 - Uma linguagem ortogonal possui menos exceções, o que torna ela mais fácil de aprender e usar. Além disso, ela tem regras previsíveis e elementos que podem ser combinados livremente, o que faz com que um conceito possa ser reaplicado em contextos semelhantes e tenha mais flexibilidade na programação, respectivamente.
4 - Em minha opinião, não há. Pois cada linguagem é projetada com diferentes objetivos. Aquela que tem uma alta legibilidade (Ex: Python), pode não ser tão boa em portabilidade como o Java, por exemplo. E assim com outras linguagens e características.
5 - São um conjunto de características que servem para categorizar um grupo de linguagens. O paradigma Imperativo é subdividido nos paradigmas: Estruturado, Orientado a Objetos e Concorrente. Já a linguagem declarativa é subdividida nos paradigmas: Funcional e Lógico.
6 - É aquela linguagem que suporta mais de um paradigma de programação, geralmente utilizam frameworks para permitir isso. Isso ocorre pois as vezes um só paradigma não é capaz de resolver todos os problemas. Ex: C#, o C-Sharp é uma linguagem multiparadigma.
7 - Paradigma Orientado a Eventos: modelo de programação baseado na reação a eventos, como interações do usuário, mensagens recebidas, mudanças de estado ou notificações do sistema.
8 - Pré-Processador: ativada pelo compilador antes do início da tradução para excluir comentários, incluir outros arquivos, etc. | Montador: após o processo de gerar a linguagem assembly, o montador produz um código de máquina relocável. | Linker/Loader: para programas grandes compilados em partes, o Linker combina os arquivos em um arquivo executável e o Loader reúne os arquivos executáveis na memória para execução. 
9 - O javac compila o código-fonte Java (.java) para bytecode (.class). O programa java executa esse bytecode (.class) na JVM (Máquina virtual Java).
10 - Depende, há dois tipos de libs. As estáticas e dinâmicas. Se for estática, sim, pois ela pode ser compilada juntamente com o código do programa (Ex: .h, jars). Já a dinâmica, depende do sistema operacional, pois são inseridas em uma das fases do compilador (Ex: .dll, .lib).